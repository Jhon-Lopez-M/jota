# basico
nombre <- "Jhon"
saludo <- "Hola"
paste(saludo, nombre)
paste(saludo, nombre, sep = "_")
install.packages("tidyverse")
notas <- c(15, 17, 14, 12)
notas <- c(15, 17, 14, 12)
newnota <- notas + 1
notas_p <-mean(newnota)
#tidyverse
library(tidyverse)
#tidyverse
library(tidyverse)
#pipe => %>% (ctrl + shift + m)
notas <- c(15, 17, 14, 12) %>%
+ 1 %>%
mean()
#pipe => %>% (ctrl + shift + m)
notas <- c(15, 17, 14, 12) %>%
+ 1 %>%
mean(notas)
area(π, r = "r^2")
paste(r)
area(π, r = "r^2")
paste(π, r)
area(π, r = "r^2")
area("π", r = "r^2")
("π", r = "r^2")
area("π", r = "r^2")
area <- function(r) {
paste(π, r)
}
area("π", r = "r^2")
area <- function(r) {
π x r x r
area(7)
area <- function(r) {
pi x r x r
area(7)
pi x r x r
area(7)
pi * r * r
area(7)
area(7)
area <- function(r) {
3.14 * r * r
}
area(7)
if (is numeric(r)){
area (r)
3.14 * r * r
if (is numeric(r)){
area (r)
area (s)
area <- function(r) {if (is numeric(r)){
area (s)
calcular_IMC <- function(peso, altura) {
# Calcular el IMC
imc <- peso / (altura^2)
# Determinar la categoría según el IMC
categoria <- ""
if (imc < 18.5) {
categoria <- "Bajo peso"
} else if (imc >= 18.5 & imc < 24.9) {
categoria <- "Peso normal"
} else if (imc >= 25 & imc < 29.9) {
categoria <- "Sobrepeso"
} else if (imc >= 30 & imc < 34.9) {
categoria <- "Obesidad grado 1"
} else if (imc >= 35 & imc < 39.9) {
categoria <- "Obesidad grado 2"
} else {
categoria <- "Obesidad grado 3"
}
# Devolver el IMC y la categoría
return(list(IMC = round(imc, 2), Categoria = categoria))
}
imc <- calcular_IMC(70, 1.75)
categoria <- "Obesidad grado 2"
imc <- calcular_IMC(70, 1.75)
imc
calcular_IMC(70, 1.75)
calcular_IMC(85, 1.75)
calcular_IMC(25, 1.75)
datos <- read.csv("LA MOLINA 2014 POTATO WUE (FB) - fb.csv", header = TRUE, sep = ",")
datos <- read.csv(file = "LA MOLINA 2014 POTATO WUE (FB) - fb.csv", header = TRUE, sep = ",")
datos
View(datos)
datos <- read.delim("LA MOLINA 2014 POTATO WUE (FB) - fb.tsv"
, header = TRUE, sep = "\t")
datos
View(datos)
library(readxl)
datos <- read_excel("LA MOLINA 2014 POTATO WUE (FB) (1).xlsx"
, sheet = 1)
datos
View(datos)
datos <- read_excel("LA MOLINA 2014 POTATO WUE (FB) (1).xlsx", sheet = "fb")
datos
View(datos)
install.packages("openxlsx")
library(openxlsx)
dtxl <- openxlsx::read.xlsx("LA MOLINA 2014 POTATO WUE (FB) (1).xlsx",
sheat = "fb")
library(openxlsx)
dtxl <- openxlsx::read.xlsx("LA MOLINA 2014 POTATO WUE (FB) (1).xlsx",
sheat = "fb")
library(readxl)
LA_MOLINA_2014_POTATO_WUE_FB_1_ <- read_excel("LA MOLINA 2014 POTATO WUE (FB) (1).xlsx",
sheet = "fb")
View(LA_MOLINA_2014_POTATO_WUE_FB_1_)
install.packages("inti")
library(googlesheets4)
url <- "https://docs.google.com/spreadsheets/d/15r7ZwcZZHbEgltlF6gSFvCTFA-CFzVBWwg3mFlRyKPs/edit?gid=172957346#gid=172957346"
gs <- as_sheets_id(url)
fb <- range_read(gs, sheat = "fb")
fb <- range_read(gs, sheet = "fb")
library(googlesheets4)
url <- "https://docs.google.com/spreadsheets/d/15r7ZwcZZHbEgltlF6gSFvCTFA-CFzVBWwg3mFlRyKPs/edit?gid=172957346#gid=172957346"
gs <- as_sheets_id(url)
fb <- range_read(gs, sheet = "fb")
View(fb)
install.packages("readxl")
install.packages("tidyverse")
install.packages("car")
install.packages("multcompView")
install.packages("ggplot2")
install.packages("readxl")
install.packages("tidyverse")
install.packages("car")
install.packages("multcompView")
install.packages("ggplot2")
install.packages("multcompView")
install.packages("car")
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("readxl")
install.packages("tidyverse")
install.packages("car")
install.packages("multcompView")
install.packages("ggplot2")
library(readxl)
library(tidyverse)
library(car)
library(multcompView)
library(ggplot2)
datos <- read_excel("09_2024_emergencia_lechugas.xlsx"
, sheet = 1)
datos
df_long <- df %>%
pivot_longer(cols = starts_with("em_d"),
names_to = "dia",
values_to = "emergencia") %>%
mutate(dia = as.numeric(str_extract(dia, "\\d+")))
df_long <- df %>%
pivot_longer(cols = starts_with("em_d"),
names_to = "dia",
values_to = "emergencia") %>%
mutate(dia = as.numeric(str_extract(dia, "\\d+")))
df_long <- df %>%
pivot_longer(cols = starts_with("em_d"),
names_to = "dia",
values_to = "emergencia") %>%
mutate(dia = as.numeric(str_extract(dia, "\\d+")))
df_long <- df %>%
pivot_longer(cols = starts_with("em_d"),
names_to = "dia",
values_to = "emergencia") %>%
mutate(dia = as.numeric(str_extract(dia, "\\d+")))
datos <- read.csv(file = "datos_emergencia_largo.csv",
header = TRUE, sep = ",")
datos
head(datos)
anova_model <- aov(emergencia ~ tratamientos * dia, data = df_long)
anova_model <- aov(emergencia ~ tratamientos * dia, data = datos)
anova_model <- aov(emergencia ~ tratamientos * dia, data = datos)
summary(anova_model)
tukey_test <- TukeyHSD(anova_model, "tratamientos")
print(tukey_test)
plot(tukey_test)
gplot(df_long, aes(x = dia, y = emergencia, color = tratamientos, group = tratamientos)) +
geom_line() +
geom_point() +
labs(title = "Emergencia de Plantas por Día para Cada Tratamiento",
x = "Día", y = "Emergencia") +
theme_minimal()
gplot(df_long, aes(x = dia, y = emergencia, color = tratamientos, group = tratamientos)) +
geom_line() +
geom_point() +
labs(title = "Emergencia de Plantas por Día para Cada Tratamiento",
x = "Día", y = "Emergencia") +
theme_minimal()
gplot(df_long, aes(x = dia, y = emergencia, color = tratamientos, group = tratamientos)) +
geom_line() +
geom_point() +
labs(title = "Emergencia de Plantas por Día para Cada Tratamiento",
x = "Día", y = "Emergencia") +
theme_minimal()
# Cargar la base de datos
data <- read.csv("datos_emergencia_largo.csv")
# Ver las primeras filas del archivo para revisar la estructura
head(data)
# Convertir tratamiento y repeticiones a factores
data$Tratamiento <- as.factor(data$Tratamiento)
data$Repeticion <- as.factor(data$Repeticion)
data$Dia <- as.factor(data$Dia)
anova_result <- aov(Respuesta ~ Tratamiento + Dia + Tratamiento:Dia, data = data)
data$Tratamiento <- as.factor(data$Tratamiento)
data$Repeticion <- as.factor(data$Repeticion)
data$Dia <- as.factor(data$Dia)
colnames(data)
library(readxl)
library(tidyverse)
library(car)
library(multcompView)
library(ggplot2)
df <- read_excel("datos_emergencia_largo.csv", sheet = "Hoja 1")
df <- read_excel("datos_emergencia_largo.csv", sheet = "Hoja 1")
df <- read_excel("datos_emergencia_largo.csv", sheet = "Hoja 1")
df <- read.csv(file = "datos_emergencia_largo.csv",
header = TRUE, sep = ",")
anova_model <- aov(emergencia ~ tratamientos * dia, data = df)
summary(anova_model)
# Realizar la prueba de Tukey
tukey_test <- TukeyHSD(anova_model, "tratamientos")
print(tukey_test)
# Crear gráfico de líneas para visualizar la emergencia por día para cada tratamiento
ggplot(df_long, aes(x = dia, y = emergencia, color = tratamientos, group = tratamientos)) +
geom_line() +
geom_point() +
labs(title = "Emergencia de Plantas por Día para Cada Tratamiento",
x = "Día", y = "Emergencia") +
theme_minimal()
# Crear gráfico de líneas para visualizar la emergencia por día para cada tratamiento
ggplot(df_long, aes(x = dia, y = emergencia, color = tratamientos, group = tratamientos)) +
geom_line() +
geom_point() +
labs(title = "Emergencia de Plantas por Día para Cada Tratamiento",
x = "Día", y = "Emergencia") +
theme_minimal()
# Crear gráfico de líneas para visualizar la emergencia por día para cada tratamiento
ggplot(df_long, aes(x = dia, y = emergencia, color = tratamientos, group = tratamientos)) +
geom_line() +
geom_point() +
labs(title = "Emergencia de Plantas por Día para Cada Tratamiento",
x = "Día", y = "Emergencia") +
theme_minimal()
# Realizar la prueba de Tukey
tukey_test <- TukeyHSD(anova_model, "tratamientos")
plot(tukey_test)
print(tukey_test)
# Realizar la prueba de Tukey
tukey_test <- TukeyHSD(anova_model, "tratamientos")
print(tukey_test)
plot(tukey_test)
library(ggplot2)
# Supongamos que df es tu dataframe con las medias por tratamiento
ggplot(df, aes(x = tratamiento, y = media, fill = tratamiento)) +
geom_bar(stat = "identity", position = "dodge") +
geom_errorbar(aes(ymin = media - sd, ymax = media + sd), width = 0.2, position = position_dodge(0.9)) +
labs(title = "Comparación de Tratamientos", x = "Tratamientos", y = "Media de Emergencia") +
theme_minimal()
# Supongamos que df es tu dataframe con las medias por tratamiento
ggplot(df, aes(x = tratamientos, y = media, fill = tratamientos)) +
geom_bar(stat = "identity", position = "dodge") +
geom_errorbar(aes(ymin = media - sd, ymax = media + sd), width = 0.2, position = position_dodge(0.9)) +
labs(title = "Comparación de Tratamientos", x = "Tratamientos", y = "Media de Emergencia") +
theme_minimal()
